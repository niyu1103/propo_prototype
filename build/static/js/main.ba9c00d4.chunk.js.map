{"version":3,"sources":["components/AudioControls.jsx","components/AudioPlayer.jsx","components/PlayList.jsx","tracks.js","assets/mp3/20210430_113621_533_radiohistory_ep0518.mp3","assets/mp3/20210424_105237_279_radiohistory_ep0517.mp3","App.jsx","index.js"],"names":["AudioControls","memo","isPlaying","onPlayClick","id","className","onClick","AudioPlayer","tracks","useState","trackIndex","setTrackIndex","trackProgress","setTrackProgress","setIsPlaying","title","date","audioSrc","image","audioTime","audioRef","useRef","Audio","intervalRef","isReady","console","log","duration","current","currentPercentage","Math","floor","startTimer","clearInterval","setInterval","ended","toNextTrack","currentTime","length","timeBarStyle","width","useEffect","play","pause","src","height","style","time","second","slice","minutes","parseTime","alt","SPEED_NUM_ARY","now_speed","playbackRate","next_speed","matched_flg","i","toFixed","PlayList","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba9c00d4.chunk.js","sourcesContent":["import React, {memo} from 'react';\n\nexport const AudioControls = memo(({\n  isPlaying,\n  onPlayClick,\n}) => {\n  return (\n    <>\n    {isPlaying ? (\n      <i\n        id='play'\n        className='material-icons'\n        onClick={() => onPlayClick(false)}\n      >\n        play_circle_outline\n      </i>\n    ) : (\n      <i\n        id='stop'\n        className='material-icons'\n        onClick={() => onPlayClick(true)}\n      >\n        pause_circle_outline\n      </i>\n    )}\n    </>\n  );\n});\n","import React, { memo, useState, useEffect, useRef } from 'react';\nimport { AudioControls } from './AudioControls';\n// import { TimeControl } from './TimeControl';\n\nexport const AudioPlayer = memo(({ tracks }) => {\n  // State\n  const [trackIndex, setTrackIndex] = useState(0);\n  const [trackProgress, setTrackProgress] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  // Destructure for conciseness\n  const { title, date, audioSrc, image, audioTime } = tracks[trackIndex];\n\n  // Refs\n  const audioRef = useRef(new Audio(audioSrc));\n  const intervalRef = useRef();\n  const isReady = useRef(false);\n  console.log(audioRef);\n\n  // Destructure for conciseness\n  const { duration } = audioRef.current;\n\n  const currentPercentage = duration\n    ? `${Math.floor((trackProgress / duration) * 100)}%`\n    : '0%';\n\n  const parseTime = (time) => {\n    let returnTime;\n    let second = ('0' + Math.floor(time % 60)).slice(-2);\n    let minutes = ('0' + Math.floor((time / 60) % 60)).slice(-2);\n    let hour = ('0' + Math.floor(time / 60 / 60)).slice(-2);\n    returnTime = hour + ':' + minutes + ':' + second;\n    return returnTime;\n  };\n\n  const startTimer = () => {\n    // Clear any timers already running\n    clearInterval(intervalRef.current);\n\n    intervalRef.current = setInterval(() => {\n      if (audioRef.current.ended) {\n        toNextTrack();\n      } else {\n        setTrackProgress(audioRef.current.currentTime);\n      }\n    }, [1000]);\n  };\n\n  const toPrevTrack = () => {\n    if (trackIndex - 1 < 0) {\n      setTrackIndex(tracks.length - 1);\n    } else {\n      setTrackIndex(trackIndex - 1);\n    }\n  };\n\n  const toNextTrack = () => {\n    if (trackIndex < tracks.length - 1) {\n      setTrackIndex(trackIndex + 1);\n    } else {\n      setTrackIndex(0);\n    }\n  };\n\n  const timeBarStyle = {\n    width: currentPercentage,\n  };\n\n  const onClickPlayBack = () => {\n    clearInterval(intervalRef.current);\n    audioRef.current.currentTime = audioRef.current.currentTime - 15;\n    setTrackProgress(audioRef.current.currentTime);\n    startTimer();\n  };\n\n  const onClickPlaySkip = () => {\n    clearInterval(intervalRef.current);\n    audioRef.current.currentTime = audioRef.current.currentTime + 30;\n    setTrackProgress(audioRef.current.currentTime);\n    startTimer();\n  };\n  console.log(audioRef.current.currentTime);\n\n  const onClickSpeedCtrl = () => {\n    const SPEED_NUM_ARY = [1.0, 1.3, 1.5, 2.0, 0.5, 0.7];\n    let now_speed = audioRef.current.playbackRate;\n    let next_speed = SPEED_NUM_ARY[0];\n    let matched_flg = false;\n    // マッチした次の値をセット\n    for (var i = 0; i < SPEED_NUM_ARY.length; i++) {\n      if (SPEED_NUM_ARY[i] === now_speed) {\n        matched_flg = true;\n        continue;\n      }\n      if (matched_flg) {\n        next_speed = SPEED_NUM_ARY[i];\n        break;\n      }\n    }\n    audioRef.current.playbackRate = next_speed;\n  };\n\n  useEffect(() => {\n    if (isPlaying) {\n      audioRef.current.play();\n      startTimer();\n    } else {\n      audioRef.current.pause();\n    }\n  }, [isPlaying]);\n\n  // Handles cleanup and setup when changing tracks\n  useEffect(() => {\n    audioRef.current.pause();\n\n    audioRef.current = new Audio(audioSrc);\n    setTrackProgress(audioRef.current.currentTime);\n\n    if (isReady.current) {\n      audioRef.current.play();\n      setIsPlaying(true);\n      startTimer();\n    } else {\n      // Set the isReady ref as true for the next pass\n      isReady.current = true;\n    }\n  }, [trackIndex]);\n\n  useEffect(() => {\n    // Pause and clean up on unmount\n    return () => {\n      audioRef.current.pause();\n      clearInterval(intervalRef.current);\n    };\n  }, []);\n\n  return (\n    <div className='App'>\n      <div id='player' className='app'>\n        <div id='audio_thumb'>\n          <img className='ep_img' src={image} width='160' height='160' />\n          <AudioControls isPlaying={isPlaying} onPlayClick={setIsPlaying} />\n        </div>\n        <div id='audio_desc'>\n          <div className='ep-date'>{date}</div>\n          <div className='ep-title'>\n            {title}\n            <span className='sp-nodisp'></span>\n          </div>\n          <div id='timebar'>\n            <div id='timebar-bg'>\n              <div id='timebar-past' style={timeBarStyle}>\n                <div id='timebar-num'>{currentPercentage}</div>\n              </div>\n            </div>\n          </div>\n          <div>\n            <span id='time_disp'>\n              {parseTime(audioRef.current.currentTime)} / {audioTime}\n            </span>\n            {/* <TimeControl currentTime={audioRef.current.currentTime} />\n             */}\n            <p className='time_control_area'>\n              <span>\n                <img\n                  id='playback'\n                  onClick={onClickPlayBack}\n                  src='https://propo.fm/image/rewind.png'\n                  width='23'\n                  alt='rewind'\n                />\n              </span>\n              <span>\n                <img\n                  id='skip'\n                  onClick={onClickPlaySkip}\n                  src='https://propo.fm/image/skip.png'\n                  width='23'\n                  alt='skip'\n                />\n              </span>\n              <span id='speed_ctrl' onClick={onClickSpeedCtrl}>\n                {audioRef.current.playbackRate.toFixed(2)}x\n              </span>\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React, { memo } from 'react';\n\nexport const PlayList = memo(() => {\n\n\n  return (\n    <>\n\n    </>\n  );\n});\n","\nimport ep0518 from \"./assets/mp3/20210430_113621_533_radiohistory_ep0518.mp3\";\nimport ep0517 from \"./assets/mp3/20210424_105237_279_radiohistory_ep0517.mp3\";\n\nexport default [\n  {\n    title:\"0518_中国の第2三国志。智勇兼備・音容兼美のイケメン皇族蘭陵王は不敗の名将\",\n    date:\"2021.05.11\",\n    audioSrc: ep0518,\n    image:\"https://storage.googleapis.com/propo-apollo.appspot.com/users/X4wgS1qpQSSvTW5FSTPgO9HyS8B2/channels/FEPdlmxIDrgN6wYk0EK0/images/radireki_thumbnail_280x280.jpg\",\n    audioTime:\"00:15:01\"\n  },\n  {\n    title: \"0517_「多数決が民主主義ではない」と説いたルソーの社会契約論\",\n    date: \"2021.05.07\",\n    audioSrc: ep0517,\n    image: \"https://storage.googleapis.com/propo-apollo.appspot.com/users/X4wgS1qpQSSvTW5FSTPgO9HyS8B2/channels/FEPdlmxIDrgN6wYk0EK0/images/radireki_thumbnail_280x280.jpg\",\n    audioTime: \"00:15:52\"\n  }\n];","export default __webpack_public_path__ + \"static/media/20210430_113621_533_radiohistory_ep0518.ca72e8b5.mp3\";","export default __webpack_public_path__ + \"static/media/20210424_105237_279_radiohistory_ep0517.b513b552.mp3\";","import React from 'react';\nimport './style/player.css';\nimport { AudioPlayer } from './components/AudioPlayer';\nimport { PlayList } from './components/PlayList';\nimport tracks from './tracks';\n\nfunction App() {\n  return (\n    <>\n      <AudioPlayer tracks={tracks} />\n      <PlayList />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport \"./style/common.css\"\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}